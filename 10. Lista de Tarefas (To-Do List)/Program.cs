/* 
### üìù Exerc√≠cio 10 ‚Äì Lista de Tarefas

#### üîç L√≥gica
1. Cria duas listas: uma para tarefas e outra para marcar se est√£o conclu√≠das.
2. Exibe um menu com op√ß√µes de adicionar, listar e concluir tarefas.
3. O loop do...while garante repeti√ß√£o at√© o usu√°rio escolher sair.
4. A op√ß√£o de marcar tarefas atualiza o status para conclu√≠do.

#### üß± Estruturas e Comandos Utilizados
- List<string> e List<bool> para armazenar tarefas e seu estado.
- switch: para tratar as op√ß√µes do menu.
- for: para listar as tarefas com seus status.

#### ‚úÖ Justificativa
Listas s√£o ideais para armazenar dados din√¢micos. O uso do switch torna o menu claro, e a separa√ß√£o do status facilita a l√≥gica de exibi√ß√£o.
*/

using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        List<string> tarefas = new List<string>();
        List<bool> concluidas = new List<bool>();
        string opcao;

        do
        {
            Console.WriteLine("\n--- MENU ---");
            Console.WriteLine("1 - Adicionar Tarefa");
            Console.WriteLine("2 - Listar Tarefas");
            Console.WriteLine("3 - Marcar como Conclu√≠da");
            Console.WriteLine("4 - Sair");
            Console.Write("Escolha uma op√ß√£o: ");
            opcao = Console.ReadLine();

            switch (opcao)
            {
                case "1":
                    Console.Write("Digite a tarefa: ");
                    string tarefa = Console.ReadLine();
                    tarefas.Add(tarefa);
                    concluidas.Add(false);
                    break;

                case "2":
                    Console.WriteLine("\n--- Lista de Tarefas ---");
                    for (int i = 0; i < tarefas.Count; i++)
                    {
                        string status = concluidas[i] ? "[X]" : "[ ]";
                        Console.WriteLine($"{i + 1}. {status} {tarefas[i]}");
                    }
                    break;

                case "3":
                    Console.Write("Digite o n√∫mero da tarefa para marcar como conclu√≠da: ");
                    int indice = int.Parse(Console.ReadLine()) - 1;
                    if (indice >= 0 && indice < concluidas.Count)
                    {
                        concluidas[indice] = true;
                        Console.WriteLine("Tarefa marcada como conclu√≠da.");
                    }
                    else
                    {
                        Console.WriteLine("√çndice inv√°lido.");
                    }
                    break;

                case "4":
                    Console.WriteLine("Saindo...");
                    break;

                default:
                    Console.WriteLine("Op√ß√£o inv√°lida.");
                    break;
            }

        } while (opcao != "4");
    }
}

